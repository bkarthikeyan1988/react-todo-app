{"version":3,"sources":["Context/TodoContext.js","Context/reducer.js","Context/action.types.js","Components/TodoForm.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","state","action","type","payload","filter","todo","id","TodoForm","useState","todoItem","setTodoItem","dispatch","useContext","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","Todos","todos","ListGroup","className","map","ListGroupItem","key","onClick","App","useReducer","todoReducer","Provider","Container","fluid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAEaA,G,YAAcC,2B,QCAZ,WAACC,EAAOC,GACnB,OAAOA,EAAOC,MACV,ICJgB,WDKZ,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,UAE7B,ICNmB,cDOf,OAAOH,EAAMI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOE,WAEnD,QACI,OAAOH,I,wDEoDJO,EAlDE,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACZC,EADY,KACFC,EADE,KAEXC,EAAaC,qBAAWd,GAAxBa,SAqBR,OACI,kBAACE,EAAA,EAAD,CAAMC,SApBS,SAAAC,GAEf,GADAA,EAAEC,iBACe,KAAbP,EACA,OAAOQ,MAAM,uBAGjB,IAAMZ,EAAO,CACTI,WACAH,GAAIY,eAGRP,EAAS,CACLT,KD7BY,WC8BZC,QAASE,IAGbK,EAAY,MAKR,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACInB,KAAK,OACLoB,KAAK,OACLhB,GAAG,OACHiB,YAAY,YACZC,MAAOf,EACPgB,SAAU,SAAAV,GAAC,OAAIL,EAAYK,EAAEW,OAAOF,UAGxC,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WACvB,kBAACC,EAAA,EAAD,CACIC,MAAM,WADV,Y,gBCnBTC,EAzBD,WAAO,IAAD,EACUnB,qBAAWd,GAA9BkC,EADS,EACTA,MAAOrB,EADE,EACFA,SAEd,OACI,kBAACsB,EAAA,EAAD,CAAWC,UAAU,mBAChBF,EAAMG,KAAI,SAAA9B,GAAI,OACX,kBAAC+B,EAAA,EAAD,CAAeC,IAAKhC,EAAKC,IACpBD,EAAKI,SACN,0BACIyB,UAAU,YACVI,QAAS,WACL3B,EAAS,CACLT,KFjBL,cEkBKC,QAASE,EAAKC,OAItB,kBAAC,IAAD,aCITiC,EAhBH,WAAO,IAAD,EACUC,qBAAWC,EAAa,IADlC,mBACTT,EADS,KACFrB,EADE,KAEhB,OACE,kBAACb,EAAY4C,SAAb,CAAsBlB,MAAO,CAACQ,QAAOrB,aACnC,yBAAKuB,UAAU,aACb,kBAACS,EAAA,EAAD,CAAWC,OAAK,EAACV,UAAU,iBACzB,sHACA,wBAAIA,UAAU,SAAQ,kBAAC,IAAD,MAAc,4CACpC,kBAAC,EAAD,MACA,kBAAC,EAAD,UCRUW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9171fcde.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const TodoContext = createContext();","import { ADD_TODO, REMOVE_TODO } from './action.types';\n\nexport default (state, action) => {\n    switch(action.type) {\n        case ADD_TODO:\n            return [...state, action.payload];\n            // break;\n        case REMOVE_TODO:\n            return state.filter(todo => todo.id !== action.payload)\n\n        default:\n            return state;\n    }\n}","export const ADD_TODO = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';","import React, { useContext, useState } from 'react';\nimport {\n    Form,\n    FormGroup,\n    Input,\n    Button,\n    InputGroup,\n    InputGroupAddon\n} from 'reactstrap';\nimport {v4} from 'uuid';\nimport {TodoContext} from '../Context/TodoContext';\nimport {ADD_TODO} from '../Context/action.types'\n\nconst TodoForm = () => {\n    const [todoItem, setTodoItem] = useState(\"\");\n    const { dispatch } = useContext(TodoContext);\n\n    const todoSubmit = e => {\n        e.preventDefault();\n        if (todoItem === \"\") {\n            return alert('Please enter a todo');\n        };\n\n        const todo = {\n            todoItem,\n            id: v4(),\n        };\n\n        dispatch({\n            type: ADD_TODO,\n            payload: todo,\n        });\n\n        setTodoItem(\"\");\n    }\n\n    return(\n        <Form onSubmit={todoSubmit}>\n            <FormGroup>\n                <InputGroup>\n                    <Input\n                        type=\"text\"\n                        name=\"todo\"\n                        id=\"todo\"\n                        placeholder=\"Next todo\"\n                        value={todoItem}\n                        onChange={e => setTodoItem(e.target.value)}\n                        //TODO: value, onChange\n                    />\n                    <InputGroupAddon addonType=\"prepend\">\n                        <Button\n                            color=\"success\"\n                            //TODO: onClick\n                        >\n                            Add\n                        </Button>\n                    </InputGroupAddon>\n                </InputGroup>\n            </FormGroup>\n        </Form>\n    );\n}\n\nexport default TodoForm;","import React, { useContext } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nimport { FcApproval } from 'react-icons/fc';\nimport { TodoContext } from '../Context/TodoContext';\nimport {REMOVE_TODO} from '../Context/action.types';\n\nconst Todos = () => {\n    const {todos, dispatch} = useContext(TodoContext);\n\n    return(\n        <ListGroup className=\"mt-3 mb-2 items\">\n            {todos.map(todo => (\n                <ListGroupItem key={todo.id}>\n                    {todo.todoItem}\n                    <span\n                        className=\"checkIcon\"\n                        onClick={() => {\n                            dispatch({\n                                type: REMOVE_TODO,\n                                payload: todo.id\n                            })\n                        }}\n                    >\n                        <FcApproval />\n                    </span>\n                </ListGroupItem>\n            ))}\n        </ListGroup>\n    )\n}\n\nexport default Todos;\n","import React, { useReducer } from 'react';\nimport { Container } from 'reactstrap';\nimport { FcTodoList } from 'react-icons/fc';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { TodoContext } from './Context/TodoContext';\nimport todoReducer from './Context/reducer';\nimport TodoForm from './Components/TodoForm';\nimport Todos from './Components/Todos';\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n  return(\n    <TodoContext.Provider value={{todos, dispatch}}>\n      <div className=\"todoBlock\">\n        <Container fluid className=\"todoContainer\">\n          <h6>TODO App with Context API using context, action type and reducer without Local Storage</h6>\n          <h2 className=\"title\"><FcTodoList /><span>TODO List</span></h2>\n          <Todos />\n          <TodoForm />\n        </Container>\n      </div>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}